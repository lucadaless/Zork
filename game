package com.bayviewglen.isp;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;


	
	
	/**
	 * Class Game - the main class of the "Zork" game.
	 *
	 * Author:  Michael Kolling
	 * Version: 1.1
	 * Date:    March 2000
	 * 
	 *  This class is the main class of the "Zork" application. Zork is a very
	 *  simple, text based adventure game.  Users can walk around some scenery.
	 *  That's all. It should really be extended to make it more interesting!
	 * 
	 *  To play this game, create an instance of this class and call the "play"
	 *  routine.
	 * 
	 *  This main class creates and initialises all the others: it creates all
	 *  rooms, creates the parser and starts the game.  It also evaluates the
	 *  commands that the parser returns.
	 */
	class Game 
	{
	    private Parser parser;
	    private Room currentRoom;
	    // This is a MASTER object that contains all of the rooms and is easily accessible.
	    // The key will be the name of the room -> no spaces (Use all caps and underscore -> Great Room would have a key of GREAT_ROOM
	    // In a hashmap keys are case sensitive.
	    // masterRoomMap.get("GREAT_ROOM") will return the Room Object that is the Great Room (assuming you have one).
	    private HashMap<String, Room> masterRoomMap;
	    private ArrayList<Item> inventory;
	    
	    private void initRooms(String fileName) throws Exception{
	    	masterRoomMap = new HashMap<String, Room>();
	    	Scanner roomScanner;
			try {
				HashMap<String, HashMap<String, String>> exits = new HashMap<String, HashMap<String, String>>();    
				roomScanner = new Scanner(new File(fileName));
				while(roomScanner.hasNext()){
					Room room = new Room();
					// Read the Name
					String roomName = roomScanner.nextLine();
					room.setRoomName(roomName.split(":")[1].trim());
					// Read the Description
					String roomDescription = roomScanner.nextLine();
					room.setDescription(roomDescription.split(":")[1].replaceAll("<br>", "\n").trim());
					// Read the Exits
					String roomExits = roomScanner.nextLine();
					// An array of strings in the format E-RoomName
					String[] rooms = roomExits.split(":")[1].split(",");
					HashMap<String, String> temp = new HashMap<String, String>(); 
					for (String s : rooms){
						temp.put(s.split("-")[0].trim(), s.split("-")[1]);
					}
					
					exits.put(roomName.substring(10).trim().toUpperCase().replaceAll(" ",  "_"), temp);
					
					String itemText = roomScanner.nextLine().trim();
					String[] itemsList = itemText.split(":");
					if (itemsList.length > 1) {
						String[] items =itemsList[1].split(",");
						for (String s : items) {
							Item item = new Item(s.split("-")[0].trim().toLowerCase(), s.split("-")[1].trim());
							room.addItem(item);
						}						
					}
					
					// This puts the room we created (Without the exits in the masterMap)
					masterRoomMap.put(roomName.toUpperCase().substring(10).trim().replaceAll(" ",  "_"), room);
					
					
					
					// Now we better set the exits.
				}
				
				for (String key : masterRoomMap.keySet()){
					Room roomTemp = masterRoomMap.get(key);
					HashMap<String, String> tempExits = exits.get(key);
					for (String s : tempExits.keySet()){
						// s = direction
						// value is the room.
						
						String roomName2 = tempExits.get(s.trim());
						Room exitRoom = masterRoomMap.get(roomName2.toUpperCase().replaceAll(" ", "_"));
						roomTemp.setExit(s.trim().charAt(0), exitRoom);
						
					}
					
					
				}
	    	
				roomScanner.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
	    }    
	/**
	     * Create the game and initialise its internal map.
	     */
	    public Game() {
	        try {
				initRooms("data/Rooms.dat");
				currentRoom = masterRoomMap.get("ROOM_1");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        parser = new Parser();
	        inventory = new ArrayList<Item>();
	    }
	/**
	     *  Main play routine.  Loops until end of play.
	     */
	    public void play() 
	    {            
	        printWelcome();
	// Enter the main command loop.  Here we repeatedly read commands and
	        // execute them until the game is over.
	                
	        boolean finished = false;
	        while (! finished)
	        {
	            Command command = parser.getCommand();
	            finished = processCommand(command);
	        }
	        System.out.println("Thank you for playing.  Good bye.");
	    }
	/**
	     * Print out the opening message for the player.
	     */
	    private void printWelcome()
	    {
	        System.out.println();
	        System.out.println("Welcome to Zork!");
	        System.out.println("Zork is a new, incredibly boring adventure game.");
	        System.out.println("Type 'help' if you need help.");
	        System.out.println();
	        System.out.println(currentRoom.longDescription());
	    }
	/**
	     * Given a command, process (that is: execute) the command.
	     * If this command ends the game, true is returned, otherwise false is
	     * returned.
	     */
	    private boolean processCommand(Command command)
	    {
	        if(command.isUnknown())
	        {
	            System.out.println("I don't know what you mean...");
	            return false;
	        }
	        String commandWord = command.getCommandWord();
	        boolean finished = false;
	        if (commandWord.equals("help"))
	            printHelp();
	        else if (commandWord.equals("go"))
	            goRoom(command);
	        else if (commandWord.equals("pickup") || commandWord.equals("take")) {
	        	finished = pickup(command);
	        } else if (commandWord.equals("drop")) {
	        	drop(command);
	        } else if (commandWord.equals("inventory") || (commandWord.equals("i"))) {
	        	inventory();
	        } else if (commandWord.equals("show") || commandWord.equals("give")) {
	        	show(command);
	        } else if (commandWord.equals("read")) {
	        	read(command);
	        } else if (commandWord.equals("look") || commandWord.equals("examine")) {
	        	look(command);
	        } else if (commandWord.equals("say")) {
	        	say(command);
	        } else if (commandWord.equals("type") || commandWord.equals("enter")) {
	        	enter(command);
	        } else if (commandWord.equals("unlock")) {
	        	unlock(command);
	        } else if (commandWord.equals("insert")) {
	        	insert(command);
	        } else if (commandWord.equals("climb")) {
	        	climb(command);
	        } else if (commandWord.equals("throw")) {
	        	toss(command);
	        } else if (commandWord.equals("drink")) {
	        	drink(command);
	        } 
	        else if (commandWord.equals("quit"))
	        {
	            if(command.hasSecondWord())
	                System.out.println("Quit what?");
	            else
	                return true;  // signal that we want to quit
	        }else if (commandWord.equals("eat")){
	        	System.out.println("Do you really think you should be eating at a time like this?");
	        }
	        return finished;
	    }
	// implementations of user commands:
	    private void climb(Command command) {
	    	if (command.hasSecondWord() && command.getSecondWord().toLowerCase().equals("ladder") && currentRoom.getRoomName().equals("Storage")) {
	    		try {
	    			currentRoom = masterRoomMap.get("STORAGE_BASEMENT");
		    		System.out.println(currentRoom.longDescription());
	    		} catch (Exception e) {
	    			// this should never be thrown
	    		}
	    	} else {
	    		System.out.println("There's nothing here to climb");
	    	}
	    }
	    
	    private void enter(Command command) {
	    	if (command.hasSecondWord() && command.getSecondWord().toLowerCase().equals("6870") && currentRoom.getRoomName().equals("Foyer")) {
	    		System.out.println("The code is correct. Your path to the east is open");
	    		try {
	    			currentRoom.setExit('E', masterRoomMap.get("PLAYERS_LOUNGE"));
		    		currentRoom.removeItem("door");
		    		System.out.println(currentRoom.longDescription());
	    		} catch (Exception e) {
	    			// this should never be thrown
	    		}
	    	} else if(command.hasSecondWord() && currentRoom.getRoomName().equals("Foyer")) {
	    		System.out.println("Incorrect Code");
	    	} else {
	    		System.out.println("I don't know how to do that");
	    	}
	    }
	    private void say(Command command) {
	    	if (command.hasSecondWord() && command.getSecondWord().toLowerCase().equals("kawhi") && currentRoom.getRoomName().toLowerCase().equals("four seasons hotel")) {
	    		System.out.println("The guard is letting you go up to the 2nd floor");
	    		currentRoom = masterRoomMap.get("2ND_FLOOR");
	    		System.out.println(currentRoom.longDescription());
	    		return;
	    	} else if(command.hasSecondWord() && currentRoom.getRoomName().equals("Four Seasons Hotel")) {
	    		System.out.println("The security guard says that is the incorrect password");
	    	} else {
	    		System.out.println(command.getSecondWord());
	    	}
	    }
	    private void read(Command command) {
	    	if (command.hasSecondWord() && (command.getSecondWord().equals("paper") || command.getSecondWord().equals("note"))) {
	    		look(command);
	    	} else {
	    		System.out.println("I don't know how to read that");
	    	}
	    }
	    private void insert (Command command) {
	    	if (command.hasSecondWord() && command.getSecondWord().equals("key") && currentRoom.getRoomName().equals("Tunnel") && hasInventory("key") && currentRoom.itemInRoom("LockedDoor")) {
	    		unlockDoor();
	    	} else {
	    		System.out.println("I don't understand how to do that");
	    	}
	    }
	    private void unlockDoor() {
	    	System.out.println("The door unlocks");
    		try {
    			Room r = masterRoomMap.get("STORAGE");
    			currentRoom.setExit('N', masterRoomMap.get("STORAGE"));
	    		currentRoom.removeItem("LockedDoor");
	    		Item item = new Item("UnlockedDoor", "An unlocked door to the north");
	    		currentRoom.addItem(item);
	    		System.out.println(currentRoom.longDescription());
    		} catch (Exception e) {
    			// this should never be thrown
    		}
	    }
	    private void unlock(Command command) {
	    	if (command.hasSecondWord() && command.getSecondWord().equals("door") && currentRoom.getRoomName().equals("Tunnel") && hasInventory("key") && currentRoom.itemInRoom("LockedDoor")) {
	    		unlockDoor();
	    	} else {
	    		System.out.println("I don't understand how to do that");
	    	}
	    }
	    
	  
	    	if (command.hasSecondWord()) {
	    		String word = command.getSecondWord();
	    		if (word.equals("paper") && (hasInventory("paper") || currentRoom.itemInRoom("paper"))) {
		    		System.out.println("The paper says:");
		    		System.out.println("0, 8, 7, 6");
		    		System.out.println("Lowest number divisible by 10 and 7");
		    		
		    	} else if (word.equals("note") && (hasInventory("note") || currentRoom.itemInRoom("note"))) {
		    		System.out.println("The note says:");
		    		System.out.println("Keep working through these Algorithms, maybe you Will win this game sooner or later, Having a fun time playing It");
		    	} 
	    		else {
		    		System.out.println("I don't see that here");
		    	}
	    	}
	    	
	    }
	   private void drink(Command command) {
		   if (command.hasSecondWord() && (command.getSecondWord().equals("water") || command.getSecondWord().equals("bottle")) && hasInventory("Bottle")) {
			   System.out.println("Ahhhhhh. Refreshing");
		   } else {
			   System.out.println("I can't drink that");
		   }
	   }
	    
	    private void show(Command command) {
	    	if (command.hasSecondWord() && command.getSecondWord().equals("ticket") && hasInventory("ticket") && currentRoom.getRoomName().toLowerCase().equals("foyer")) {
	    		System.out.println("The usher is letting you enter the arena");
	    		try {
	    			currentRoom.setExit('N', masterRoomMap.get("ARENA"));
		    		currentRoom.removeItem("usher");
		    		removeItem("ticket");
		    		System.out.println(currentRoom.longDescription());
	    		} catch (Exception e) {
	    			// this should never be thrown
	    		}
	    	}
	    }
	/**
	     * Print out some help information.
	     * Here we print some stupid, cryptic message and a list of the 
	     * command words.
	     */
	    private void printHelp() 
	    {
	        System.out.println("You are lost. You are alone. You wander");
	        System.out.println("around at Monash Uni, Peninsula Campus.");
	        System.out.println();
	        System.out.println("Your command words are:");
	        parser.showCommands();
	    }
	    private boolean hasInventory(String itemName) {
	    	for (int i = 0; i <inventory.size(); i++) {
	    		if (inventory.get(i).getName().equals(itemName.toLowerCase())) {
	    			return true;
	    		}
	    	}
	    	return false;
	    }
	  
	    private void inventory() {
	    	System.out.println("You are carrying:");
	    	
	    	for (int i = 0; i <inventory.size(); i++) {
	    		System.out.println(inventory.get(i).getDescription());
	    	}
	    }
	    private boolean pickup(Command command) 
	    {
	        if(!command.hasSecondWord())
	        {
	            // if there is no second word, we don't know where to go...
	            System.out.println("Pickup What?");
	            return false;
	        }
	        String itemName = command.getSecondWord();
	        Item item = currentRoom.removeItem(itemName);
	        if (item == null) {
	        	System.out.println("I don't know what you want to pickup");
	        } else if ((currentRoom.getRoomName().equals("Tunnel") && command.getSecondWord().equals("door")) || 
	        		  (currentRoom.getRoomName().equals("Storage") && command.getSecondWord().equals("ladder")) || 
	        		  (currentRoom.getRoomName().equals("Foyer") && command.getSecondWord().equals("chair")) ||
	        		  (currentRoom.getRoomName().equals("Foyer") && command.getSecondWord().equals("usher"))){
	        	System.out.println("You can't take that");
	        } else {
	        	if (inventory.size() < 7) {
	        		addItem(item);
	        		if (hasInventory("trophy")) {
	        			System.out.println("YOU WIN!!!");
	        			return true;
	        		}
	        		System.out.println(currentRoom.longDescription());
	        	} else {
	        		System.out.println("That's too much to carry");
	        	}
	        }
	        return false;
	    }
	    private void toss(Command command) {
	    	if(currentRoom.getRoomName().equals("Foyer") && hasInventory("basketball")) {
	    		System.out.println("The usher is not impressed");
	    	} 
	    	drop(command);
	    }
	    private void drop(Command command) {
	        if(!command.hasSecondWord())
	        {
	            // if there is no second word, we don't know where to go...
	            System.out.println("Drop What?");
	            return;
	        }	
	        String itemName = command.getSecondWord();
	        Item item = removeItem(itemName);
	        if (item == null) {
	        	System.out.println("You don't have that");
	        } else {
	        	currentRoom.addItem(item);
	        	System.out.println(currentRoom.longDescription());
	        }
	        
	    }
	/** 
	     * Try to go to one direction. If there is an exit, enter the new
	     * room, otherwise print an error message.
	     */
	    private void goRoom(Command command) 
	    {
	        if(!command.hasSecondWord())
	        {
	            // if there is no second word, we don't know where to go...
	            System.out.println("Go where?");
	            return;
	        }
	        String direction = command.getSecondWord();
	        // Try to leave current room.
	        Room nextRoom = currentRoom.nextRoom(direction);
	        if (nextRoom == null)
	            System.out.println("There is no door!");
	        else 
	        {
	            currentRoom = nextRoom;
	            System.out.println(currentRoom.longDescription());
	        }
	    }
	    public void addItem(Item item) {
			inventory.add(item);
		}
	    public Item removeItem(String itemName) {
			Item item = null;
			for(int i = 0;i < inventory.size();i++) {
				if (inventory.get(i).getName().equals(itemName.toLowerCase())) {
					item = inventory.get(i);
					inventory.remove(i);
					break;
				}
			}
			return item;
		}
		
	    

	}

